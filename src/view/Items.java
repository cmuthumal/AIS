package view;

import com.toedter.calendar.JCalendar;
import controller.ItemController;
import controller.SupplierController;
import java.awt.Dimension;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Item;
import model.Supplier;
import verification.LengthRestrictedDocument;
import verification.Verify;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class Items extends javax.swing.JDialog {

    private ItemController itemController;
    private SupplierController supplierController;
    private DefaultTableModel tableModel;
    private SimpleDateFormat dateFormat;
    private ArrayList<Item> itemsList;
    private ArrayList<Supplier> suppliersList;
    private int mode;
    private boolean batchNoFlag, descriptionFlag, buyingPriceFlag, sellingPriceFlag, discountFlag, qtyOnHandFlag, supplierFlag, regDateFlag, expDateFlag;
    private String lastID = "", type;
    String[] supIDs, suppliersArray;

    /**
     * Creates new form ItemsForm
     */
    public Items(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        setLocationRelativeTo(parent);

        itemController = new ItemController();
        supplierController = new SupplierController();
        itemTable.getTableHeader().setReorderingAllowed(false);
        tableModel = (DefaultTableModel) itemTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        setCalendar(regDateText.getJCalendar());
        setCalendar(expDateText.getJCalendar());
        setFieldLengths();
        setFieldsPanel(false);
        setSuppliersCombo();
        viewAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        searchCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        viewAllButton = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        fieldsPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        codeLabel = new javax.swing.JLabel();
        batchNoLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        buyingPriceLabel = new javax.swing.JLabel();
        sellingPriceLabel = new javax.swing.JLabel();
        regDateLabel = new javax.swing.JLabel();
        batchNoText = new javax.swing.JTextField();
        descriptionText = new javax.swing.JTextField();
        buyingPriceText = new javax.swing.JTextField();
        sellingPriceText = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        regDateText = new com.toedter.calendar.JDateChooser();
        deleteButton = new javax.swing.JButton();
        discountText = new javax.swing.JTextField();
        discountLabel = new javax.swing.JLabel();
        expDateLabel = new javax.swing.JLabel();
        expDateText = new com.toedter.calendar.JDateChooser();
        qtyOnHandLabel = new javax.swing.JLabel();
        qtyOnHandText = new javax.swing.JTextField();
        supplierLabel = new javax.swing.JLabel();
        supplierCombo = new javax.swing.JComboBox();
        editButton = new javax.swing.JButton();
        addNewButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Items");
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        searchPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Code", "Description", "Batch No" }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(viewAllButton))
                .addContainerGap())
        );

        tablePane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));
        tablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Batch No", "Description", "Buying Price", "Selling Price", "Discount", "Qty on Hand", "Supplier", "Reg Date", "Exp Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        tablePane.setViewportView(itemTable);
        if (itemTable.getColumnModel().getColumnCount() > 0) {
            itemTable.getColumnModel().getColumn(0).setMinWidth(85);
            itemTable.getColumnModel().getColumn(0).setMaxWidth(85);
            itemTable.getColumnModel().getColumn(1).setMinWidth(85);
            itemTable.getColumnModel().getColumn(1).setMaxWidth(85);
            itemTable.getColumnModel().getColumn(3).setMinWidth(100);
            itemTable.getColumnModel().getColumn(3).setMaxWidth(100);
            itemTable.getColumnModel().getColumn(4).setMinWidth(100);
            itemTable.getColumnModel().getColumn(4).setMaxWidth(100);
            itemTable.getColumnModel().getColumn(5).setMinWidth(75);
            itemTable.getColumnModel().getColumn(5).setMaxWidth(75);
            itemTable.getColumnModel().getColumn(6).setMinWidth(100);
            itemTable.getColumnModel().getColumn(6).setMaxWidth(100);
            itemTable.getColumnModel().getColumn(7).setMinWidth(85);
            itemTable.getColumnModel().getColumn(7).setMaxWidth(85);
            itemTable.getColumnModel().getColumn(8).setMinWidth(90);
            itemTable.getColumnModel().getColumn(8).setMaxWidth(90);
            itemTable.getColumnModel().getColumn(9).setMinWidth(90);
            itemTable.getColumnModel().getColumn(9).setMaxWidth(90);
        }

        fieldsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        codeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        codeLabel.setText("Code");

        batchNoLabel.setText("Batch No");

        descriptionLabel.setText("Description");

        buyingPriceLabel.setText("Buying Price");

        sellingPriceLabel.setText("Selling Price");

        regDateLabel.setText("Reg Date");
        regDateLabel.setPreferredSize(new java.awt.Dimension(84, 27));

        batchNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchNoTextActionPerformed(evt);
            }
        });

        descriptionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTextActionPerformed(evt);
            }
        });

        buyingPriceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyingPriceTextActionPerformed(evt);
            }
        });
        buyingPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                buyingPriceTextKeyTyped(evt);
            }
        });

        sellingPriceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellingPriceTextActionPerformed(evt);
            }
        });
        sellingPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sellingPriceTextKeyTyped(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        regDateText.setDateFormatString("yyyy-MM-dd");
        regDateText.setIcon(new ImageIcon("./resources/icon/calendar-icon.png"));

        deleteButton.setText("Delete");
        deleteButton.setPreferredSize(new java.awt.Dimension(90, 29));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        discountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountTextActionPerformed(evt);
            }
        });
        discountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discountTextKeyTyped(evt);
            }
        });

        discountLabel.setText("Discount");

        expDateLabel.setText("Exp Date");
        expDateLabel.setPreferredSize(new java.awt.Dimension(84, 27));

        expDateText.setDateFormatString("yyyy-MM-dd");
        expDateText.setIcon(new ImageIcon("./resources/icon/calendar-icon.png"));

        qtyOnHandLabel.setText("Qty on Hand");

        qtyOnHandText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandTextActionPerformed(evt);
            }
        });

        supplierLabel.setText("Supplier");

        javax.swing.GroupLayout fieldsPanelLayout = new javax.swing.GroupLayout(fieldsPanel);
        fieldsPanel.setLayout(fieldsPanelLayout);
        fieldsPanelLayout.setHorizontalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGap(664, 664, 664)
                        .addComponent(codeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(discountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buyingPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(batchNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(supplierLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionText)
                            .addComponent(batchNoText)
                            .addComponent(supplierCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(regDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(discountText)
                                    .addComponent(buyingPriceText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                                        .addComponent(expDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                                        .addComponent(qtyOnHandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                                        .addComponent(sellingPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sellingPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        fieldsPanelLayout.setVerticalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batchNoLabel)
                    .addComponent(batchNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionLabel)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyingPriceLabel)
                    .addComponent(buyingPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sellingPriceLabel)
                    .addComponent(sellingPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyOnHandLabel)
                    .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierLabel)
                    .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(regDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        addNewButton.setText("Add New");
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        infoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel.setText(" ");
        infoLabel.setPreferredSize(new java.awt.Dimension(400, 27));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 364, Short.MAX_VALUE)
                        .addComponent(addNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(editButton)
                    .addComponent(addNewButton)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        searchText.setText("");

        tableModel.setRowCount(0);
        try {
            itemsList = itemController.getAllItems();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        setTable();
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);

        String key = searchText.getText();
        if (!key.equals("")) {
            tableModel.setRowCount(0);
            try {
                itemsList = itemController.searchItem(key, type);
            } catch (SQLException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            }

            setTable();
        } else {
            viewAllButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchTextActionPerformed

    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
        int sel = searchCombo.getSelectedIndex();
        if (sel == 0) {
            type = "code";
        } else if (sel == 1) {
            type = "description";
        } else if (sel == 2) {
            type = "batchNo";
        }
        searchText.selectAll();
        searchText.requestFocus();
    }//GEN-LAST:event_searchComboActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchTextActionPerformed(null);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        mode = 0;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked
        int count = evt.getClickCount();
        if (count == 1) {
            clearFieldsPanel();
            setFieldsPanel(false);
            editButton.setEnabled(true);
        } else if (count == 2) {
            editButtonActionPerformed(null);
        }
    }//GEN-LAST:event_itemTableMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        mode = 2;
        clearFieldsPanel();
        setFieldsPanel(false);
        int row = itemTable.getSelectedRow();

        codeLabel.setText(itemTable.getValueAt(row, 0) + "");
        batchNoText.setText(itemTable.getValueAt(row, 1) + "");
        descriptionText.setText(itemTable.getValueAt(row, 2) + "");
        buyingPriceText.setText(itemTable.getValueAt(row, 3) + "");
        sellingPriceText.setText(itemTable.getValueAt(row, 4) + "");
        discountText.setText(itemTable.getValueAt(row, 5) + "");
        qtyOnHandText.setText(itemTable.getValueAt(row, 6) + "");
        String sup = (String) itemTable.getValueAt(row, 7);
        for (int i = 0; i < supIDs.length; i++) {
            if (supIDs[i].equals(sup)) {
                supplierCombo.setSelectedIndex(i + 1);
                break;
            }
        }
        String rd = (String) itemTable.getValueAt(row, 8);
        try {
            regDateText.setDate(dateFormat.parse(rd));
        } catch (ParseException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
        String ed = (String) itemTable.getValueAt(row, 9);
        try {
            expDateText.setDate(dateFormat.parse(ed));
        } catch (ParseException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        setFieldsPanel(true);
        batchNoText.selectAll();
        batchNoText.requestFocus();
    }//GEN-LAST:event_editButtonActionPerformed

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        mode = 1;
        String id = " ";
        viewAllButtonActionPerformed(null);
        setFieldsPanel(true);
        deleteButton.setEnabled(false);

        try {
            id = itemController.getNextID();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        codeLabel.setText(id);
        regDateText.setDate(new Date());
        batchNoText.requestFocus();
    }//GEN-LAST:event_addNewButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Item cus = setItem();

        if (!batchNoFlag) {
            displayMessage("Enter batch number");
            batchNoText.selectAll();
            batchNoText.requestFocus();
        } else if (!descriptionFlag) {
            displayMessage("Enter the item description");
            descriptionText.selectAll();
            descriptionText.requestFocus();
        } else if (!buyingPriceFlag) {
            displayMessage("Enter buying price");
            buyingPriceText.selectAll();
            buyingPriceText.requestFocus();
        } else if (!sellingPriceFlag) {
            displayMessage("Enter selling price");
            sellingPriceText.selectAll();
            sellingPriceText.requestFocus();
        } else if (!discountFlag) {
            displayMessage("Enter discount value");
            discountText.selectAll();
            discountText.requestFocus();
        } else if (!qtyOnHandFlag) {
            displayMessage("Enter quantity on hand");
            qtyOnHandText.selectAll();
            qtyOnHandText.requestFocus();
        } else if (!supplierFlag) {
            displayMessage("Select the supplier");
        } else if (!regDateFlag) {
            displayMessage("Select registered date");
        } else if (!expDateFlag) {
            displayMessage("Select expiry date");
        } else {
            if (mode == 1) {
                boolean added = false;

                try {
                    added = itemController.addItem(cus);
                } catch (SQLException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (added) {
                    displayMessage("Record added");
                    mode = 0;
                    viewAllButtonActionPerformed(null);
                } else {
                    displayMessage("Record was not added");
                }
            } else if (mode == 2) {
                boolean updated = false;

                try {
                    updated = itemController.updateItem(cus);
                } catch (SQLException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (updated) {
                    displayMessage("Record updated");
                    mode = 0;
                    viewAllButtonActionPerformed(null);
                } else {
                    displayMessage("Record was not updated");
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void batchNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchNoTextActionPerformed
        descriptionText.selectAll();
        descriptionText.requestFocus();
    }//GEN-LAST:event_batchNoTextActionPerformed

    private void descriptionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTextActionPerformed
        buyingPriceText.selectAll();
        buyingPriceText.requestFocus();
    }//GEN-LAST:event_descriptionTextActionPerformed

    private void buyingPriceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyingPriceTextActionPerformed
        sellingPriceText.selectAll();
        sellingPriceText.requestFocus();
    }//GEN-LAST:event_buyingPriceTextActionPerformed

    private void sellingPriceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellingPriceTextActionPerformed
        discountText.selectAll();
        discountText.requestFocus();
    }//GEN-LAST:event_sellingPriceTextActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int conf = JOptionPane.showConfirmDialog(fieldsPanel, "Are you sure you want to delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (conf == 0) {
            boolean deleted = false;

            try {
                deleted = itemController.deleteItem(codeLabel.getText());
            } catch (SQLException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (deleted) {
                displayMessage("Record deleted");
                viewAllButtonActionPerformed(null);
            } else {
                displayMessage("Record was not deleted");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void buyingPriceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buyingPriceTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_buyingPriceTextKeyTyped

    private void sellingPriceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellingPriceTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_sellingPriceTextKeyTyped

    private void discountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountTextActionPerformed
        qtyOnHandText.selectAll();
        qtyOnHandText.requestFocus();
    }//GEN-LAST:event_discountTextActionPerformed

    private void discountTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_discountTextKeyTyped

    private void qtyOnHandTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_qtyOnHandTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Items dialog = new Items(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewButton;
    private javax.swing.JLabel batchNoLabel;
    private javax.swing.JTextField batchNoText;
    private javax.swing.JLabel buyingPriceLabel;
    private javax.swing.JTextField buyingPriceText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountText;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel expDateLabel;
    private com.toedter.calendar.JDateChooser expDateText;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel qtyOnHandLabel;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JLabel regDateLabel;
    private com.toedter.calendar.JDateChooser regDateText;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    private javax.swing.JLabel sellingPriceLabel;
    private javax.swing.JTextField sellingPriceText;
    private javax.swing.JComboBox supplierCombo;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JScrollPane tablePane;
    private javax.swing.JButton viewAllButton;
    // End of variables declaration//GEN-END:variables

    private void displayMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabel.setText(" ");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(" ");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(msg);
                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(" ");
            }
        }.start();
    }

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(320, 200);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void setFieldLengths() {
        batchNoText.setDocument(new LengthRestrictedDocument(9));
        descriptionText.setDocument(new LengthRestrictedDocument(100));
        buyingPriceText.setDocument(new LengthRestrictedDocument(8));
        sellingPriceText.setDocument(new LengthRestrictedDocument(8));
        discountText.setDocument(new LengthRestrictedDocument(5));
        qtyOnHandText.setDocument(new LengthRestrictedDocument(4));
    }

    private void clearFieldsPanel() {
        codeLabel.setText("Code");
        batchNoText.setText("");
        descriptionText.setText("");
        buyingPriceText.setText("");
        sellingPriceText.setText("");
        discountText.setText("");
        qtyOnHandText.setText("");
        supplierCombo.setSelectedIndex(0);
        regDateText.setDate(null);
        expDateText.setDate(null);
        clearFlags();
    }

    private void clearFlags() {
        batchNoFlag = false;
        descriptionFlag = false;
        buyingPriceFlag = false;
        sellingPriceFlag = false;
        discountFlag = false;
        qtyOnHandFlag = false;
        supplierFlag = false;
        regDateFlag = false;
        expDateFlag = false;
    }

    private void setFieldsPanel(boolean b) {
        codeLabel.setEnabled(b);
        batchNoLabel.setEnabled(b);
        descriptionLabel.setEnabled(b);
        buyingPriceLabel.setEnabled(b);
        sellingPriceLabel.setEnabled(b);
        discountLabel.setEnabled(b);
        qtyOnHandLabel.setEnabled(b);
        supplierLabel.setEnabled(b);
        regDateLabel.setEnabled(b);
        expDateLabel.setEnabled(b);
        batchNoText.setEnabled(b);
        descriptionText.setEnabled(b);
        buyingPriceText.setEnabled(b);
        sellingPriceText.setEnabled(b);
        discountText.setEnabled(b);
        qtyOnHandText.setEnabled(b);
        supplierCombo.setEnabled(b);
        regDateText.setEnabled(b);
        expDateText.setEnabled(b);
        deleteButton.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
    }

    private void setTable() {
        editButton.setEnabled(false);
        if (!itemsList.isEmpty()) {
            for (int i = 0; i < itemsList.size(); i++) {
                Item it = itemsList.get(i);
                Object[] row = {it.getCode(), it.getBatchNo(), it.getDescription(), it.getBuyingPrice(), it.getSellingPrice(), it.getDiscount(), it.getQtyOnHand(), it.getSupplier(), it.getRegDate(), it.getExpDate()};
                tableModel.addRow(row);
            }
        }
    }

    private Item setItem() {
        Item it = null;
        String code = codeLabel.getText(), batchNo, description, supplier = null, regDate = null, expDate = null;
        int qtyOnHand = 0;
        double buyingPrice = 0, sellingPrice = 0, discount = 0;
        Date rd = null, ed;
        Verify ver = new Verify();

        batchNo = batchNoText.getText();
        if (!batchNo.equals("")) {
            batchNoFlag = true;
        }
        description = descriptionText.getText();
        if (!description.equals("")) {
            descriptionFlag = true;
        }
        buyingPrice = Double.parseDouble(buyingPriceText.getText());
        if (buyingPrice > 0) {
            buyingPriceFlag = true;
        }
        sellingPrice = Double.parseDouble(sellingPriceText.getText());
        if (sellingPrice > 0 && sellingPrice >= buyingPrice) {
            sellingPriceFlag = true;
        }
        discount = Double.parseDouble(discountText.getText());
        if (discount > 0 && discount < 100) {
            discountFlag = true;
        }
        qtyOnHand = Integer.parseInt(qtyOnHandText.getText());
        if (qtyOnHand > 0) {
            qtyOnHandFlag = true;
        }
        if (supplierCombo.getSelectedIndex() != 0) {
            supplier = supIDs[supplierCombo.getSelectedIndex() - 1];
            supplierFlag = true;
        }
        if (regDateText.getDate() != null) {
            rd = regDateText.getDate();
            regDate = dateFormat.format(rd);
            if (ver.verifyDate(regDate)) {
                regDateFlag = true;
            }
        }
        if (expDateText.getDate() != null) {
            ed = expDateText.getDate();
            expDate = dateFormat.format(ed);
            if (ver.verifyDate(expDate) && ed.after(rd)) {
                expDateFlag = true;
            }
        }

        it = new Item(code, batchNo, description, buyingPrice, sellingPrice, discount, qtyOnHand, supplier, regDate, expDate);
        return it;
    }

    private void setSuppliersCombo() {
        try {
            suppliersList = supplierController.getAllSuppliers();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!suppliersList.isEmpty()) {
            supIDs = new String[suppliersList.size()];
            suppliersArray = new String[suppliersList.size() + 1];
            suppliersArray[0] = "-Select a supplier-";
            for (int i = 0; i < suppliersList.size(); i++) {
                Supplier sup = suppliersList.get(i);
                supIDs[i] = sup.getId();
                suppliersArray[i + 1] = sup.getId() + "   " + sup.getName();
            }
            supplierCombo.setModel(new DefaultComboBoxModel(suppliersArray));
        }
    }
}
