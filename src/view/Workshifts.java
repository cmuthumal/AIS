/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.EmployeeController;
import controller.WorkshiftController;
import java.awt.Dimension;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Employee;
import model.Workshift;
import verification.LengthRestrictedDocument;
import verification.Verify;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class Workshifts extends javax.swing.JDialog {

    private EmployeeController employeeController = new EmployeeController();
    private WorkshiftController workshiftController = new WorkshiftController();
    private DefaultTableModel workshiftTableModel, historyTableModel;
    private SimpleDateFormat dateFormat;
    private ArrayList<Employee> employeeList, empsList;
    private ArrayList<Workshift> workshiftList, wrksList;
    private ButtonGroup buttonGroup;
    private int mode = 0;
    private String selectedWorkshiftID, sortMode = "desc";
    private String[] workshiftIDs, empIDs, employeesArray;
    private Date selectedDate;
    private boolean empIDFlag, dateFlag, startFlag, endFlag;

    /**
     * Creates new form Workshifts
     */
    public Workshifts(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        setLocationRelativeTo(parent);

        buttonGroup = new ButtonGroup();
        buttonGroup.add(presentRadioButton);
        buttonGroup.add(absentRadioButton);

        startingTimeText.setDocument(new LengthRestrictedDocument(4));
        endingTimeText.setDocument(new LengthRestrictedDocument(4));

        workshiftTableModel = (DefaultTableModel) workshiftsTable.getModel();
        historyTableModel = (DefaultTableModel) historyTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        setCalendar(selectDateText.getJCalendar());
        setCalendar(dateText.getJCalendar());
        Date d = new Date();
        selectDateText.setDate(d);
        setEmployeesCombo();
        monthCombo.setSelectedIndex(selectedDate.getMonth() - 1);

        setDetailsPanel(false);
        editButton.setEnabled(false);

        setHistoryTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        detailPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        presentRadioButton = new javax.swing.JRadioButton();
        absentRadioButton = new javax.swing.JRadioButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        startingTimeText = new javax.swing.JTextField();
        endingTimeText = new javax.swing.JTextField();
        dateText = new com.toedter.calendar.JDateChooser();
        deleteButton = new javax.swing.JButton();
        employeeCombo = new javax.swing.JComboBox();
        idLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workshiftsTable = new javax.swing.JTable();
        editButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        selectDateText = new com.toedter.calendar.JDateChooser();
        jLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        monthCombo = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Workshifts");
        setResizable(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        infoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel.setText(" ");
        infoLabel.setPreferredSize(new java.awt.Dimension(400, 27));

        detailPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        jLabel1.setText("Employee");

        jLabel3.setText("Date");

        jLabel4.setText("Staring Time");

        jLabel5.setText("Ending Time");

        jLabel6.setText("Present");

        presentRadioButton.setText("Present");
        presentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentRadioButtonActionPerformed(evt);
            }
        });

        absentRadioButton.setText("Absent");
        absentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absentRadioButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        startingTimeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startingTimeTextActionPerformed(evt);
            }
        });
        startingTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startingTimeTextKeyTyped(evt);
            }
        });

        endingTimeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endingTimeTextActionPerformed(evt);
            }
        });
        endingTimeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                endingTimeTextKeyTyped(evt);
            }
        });

        dateText.setDateFormatString("yyyy-MM-dd");
        dateText.setIcon(new ImageIcon("./resources/icon/calendar-icon.png"));
        dateText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateTextPropertyChange(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        idLabel.setText("ID");

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(detailPanelLayout.createSequentialGroup()
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(detailPanelLayout.createSequentialGroup()
                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(detailPanelLayout.createSequentialGroup()
                                    .addComponent(presentRadioButton)
                                    .addGap(194, 194, 194)
                                    .addComponent(absentRadioButton))
                                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(endingTimeText, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(startingTimeText, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(dateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                                    .addComponent(employeeCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(employeeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startingTimeText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(endingTimeText, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(presentRadioButton)
                    .addComponent(absentRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        workshiftsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Starting", "Ending", "Present"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workshiftsTable.getTableHeader().setReorderingAllowed(false);
        workshiftsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workshiftsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(workshiftsTable);

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton))
                .addContainerGap())
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        selectDateText.setDateFormatString("yyyy-MM-dd");
        selectDateText.setIcon(new ImageIcon("./resources/icon/calendar-icon.png"));
        selectDateText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                selectDateTextPropertyChange(evt);
            }
        });

        jLabel.setText("Select Date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Total Hours", "OT Hours"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(historyTable);

        jLabel2.setText("Work History");

        monthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "June", "July", "August", "September", "October", "November", "December" }));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        jLabel8.setText("Month");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(91, 91, 91))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 19, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void selectDateTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_selectDateTextPropertyChange
        editButton.setEnabled(false);
        if (selectDateText.getDate() != null) {
            selectedDate = selectDateText.getDate();
            setWorkshiftsTable(selectedDate);
        }
    }//GEN-LAST:event_selectDateTextPropertyChange

    private void workshiftsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workshiftsTableMouseClicked
        if (workshiftsTable.getSelectedRow() >= 0) {
            int count = evt.getClickCount();
            if (count == 1) {
                editButton.setEnabled(true);
                clearDetailsPanel();
                setDetailsPanel(false);
            } else if (count == 2) {
                editButtonActionPerformed(null);
            }
        }

        if (workshiftsTable.getSelectedRow() >= 0) {
            selectedWorkshiftID = workshiftIDs[workshiftsTable.getSelectedRow()];
        }
    }//GEN-LAST:event_workshiftsTableMouseClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearDetailsPanel();
        setDetailsPanel(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Workshift wrk = setWorkshift();

        if (!empIDFlag) {
            displayMessage("Select an employee.");
            setFlags(false);
        } else if (!dateFlag) {
            displayMessage("Enter a valid date.");
            setFlags(false);
        } else if (!startFlag) {
            displayMessage("Enter a valid starting time");
            setFlags(false);
        } else if (!endFlag) {
            displayMessage("Enter a valid ending time");
            setFlags(false);
        } else {
            if (mode == 1) {
                boolean added = false;

                try {
                    added = workshiftController.addWorkshift(wrk);
                } catch (SQLException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (added) {
                    displayMessage("Workshift added.");
                    clearDetailsPanel();
                    setDetailsPanel(false);
                    setWorkshiftsTable(selectedDate);
                    setHistoryTable();
                } else {
                    displayMessage("Workshift was not  added.");
                }
            } else if (mode == 2) {
                boolean updated = false;

                try {
                    updated = workshiftController.updateWorkshift(wrk);
                } catch (SQLException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (updated) {
                    displayMessage("Workshift updated.");
                    clearDetailsPanel();
                    setDetailsPanel(false);
                    setWorkshiftsTable(selectedDate);
                    setHistoryTable();
                } else {
                    displayMessage("Workshift was not  updated.");
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void presentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_presentRadioButtonActionPerformed

    private void absentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absentRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_absentRadioButtonActionPerformed

    private void dateTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateTextPropertyChange
        startingTimeText.selectAll();
        startingTimeText.requestFocus();
    }//GEN-LAST:event_dateTextPropertyChange

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        mode = 1;
        clearDetailsPanel();

        String nextID = "ID";

        try {
            nextID = workshiftController.getNextID();
        } catch (SQLException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        }
        idLabel.setText(nextID);

        absentRadioButton.setSelected(true);
        setDetailsPanel(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        mode = 2;
        idLabel.setText(workshiftIDs[workshiftsTable.getSelectedRow()]);
        setDetailsToPanel();
        setDetailsPanel(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int conf = JOptionPane.showConfirmDialog(detailPanel, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (conf == 0) {
            boolean deleted = false;

            try {
                deleted = workshiftController.deleteWorkshift(idLabel.getText());
            } catch (SQLException ex) {
                Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (deleted) {
                displayMessage("Record deleted");
                clearDetailsPanel();
                setDetailsPanel(false);
                setWorkshiftsTable(selectedDate);
            } else {
                displayMessage("Record was not deleted");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void startingTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startingTimeTextActionPerformed
        endingTimeText.selectAll();
        endingTimeText.requestFocus();
    }//GEN-LAST:event_startingTimeTextActionPerformed

    private void endingTimeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endingTimeTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_endingTimeTextActionPerformed

    private void startingTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startingTimeTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_startingTimeTextKeyTyped

    private void endingTimeTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_endingTimeTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_endingTimeTextKeyTyped

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        //
    }//GEN-LAST:event_monthComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Workshifts.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Workshifts.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Workshifts.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Workshifts.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Workshifts dialog = new Workshifts(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton absentRadioButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private com.toedter.calendar.JDateChooser dateText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JComboBox employeeCombo;
    private javax.swing.JTextField endingTimeText;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox monthCombo;
    private javax.swing.JRadioButton presentRadioButton;
    private javax.swing.JButton saveButton;
    private com.toedter.calendar.JDateChooser selectDateText;
    private javax.swing.JTextField startingTimeText;
    private javax.swing.JTable workshiftsTable;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(360, 200);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void displayMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabel.setText(" ");
                try {
                    sleep(50);

                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(msg);
                try {
                    sleep(50);

                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(" ");
                try {
                    sleep(100);

                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(msg);
                try {
                    sleep(5000);

                } catch (InterruptedException ex) {
                    Logger.getLogger(Home.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText(" ");
            }
        }.start();
    }

    private void setWorkshiftsTable(Date selectedDate) {
        workshiftTableModel.setRowCount(0);
        try {
            workshiftList = workshiftController.getWorkshift(dateFormat.format(selectedDate));
        } catch (SQLException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!workshiftList.isEmpty()) {
            workshiftIDs = new String[workshiftList.size()];
            for (int i = 0; i < workshiftList.size(); i++) {
                String id, name, st, en;
                Workshift w = workshiftList.get(i);
                workshiftIDs[i] = w.getId();
                id = w.getEmployeeID();

                try {
                    employeeList = employeeController.searchEmployee(id, "id");
                } catch (SQLException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
                }

                name = employeeList.get(0).getName();
                st = w.getStarting() + "";
                en = w.getEnding() + "";
                if (w.getStarting() < 1000) {
                    st = "0" + w.getStarting();
                }
                if (w.getEnding() < 1000) {
                    en = "0" + w.getEnding();
                }

                Object[] row = {id, name, st, en, w.getPresent()};
                workshiftTableModel.addRow(row);
            }
        } else {
            editButton.setEnabled(false);
            clearDetailsPanel();
            setDetailsPanel(false);
        }
    }

    private void clearDetailsPanel() {
        if (employeeCombo.getItemCount() > 0) {
            employeeCombo.setSelectedIndex(0);
        }
        dateText.setDate(null);
        startingTimeText.setText("");
        endingTimeText.setText("");
        absentRadioButton.setSelected(true);
        idLabel.setText("ID");

        setFlags(false);
    }

    private void setFlags(boolean b) {
        empIDFlag = false;
        dateFlag = false;
        startFlag = false;
        endFlag = false;
    }

    private void setDetailsPanel(boolean b) {
        jLabel1.setEnabled(b);
        jLabel3.setEnabled(b);
        jLabel4.setEnabled(b);
        jLabel5.setEnabled(b);
        jLabel6.setEnabled(b);
        employeeCombo.setEnabled(b);
        dateText.setEnabled(b);
        startingTimeText.setEnabled(b);
        endingTimeText.setEnabled(b);
        presentRadioButton.setEnabled(b);
        absentRadioButton.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
        deleteButton.setEnabled(b);
        idLabel.setEnabled(b);
    }

    private void setDetailsToPanel() {
        String id = (String) workshiftsTable.getValueAt(workshiftsTable.getSelectedRow(), 0);
        for (int i = 0; i < empIDs.length; i++) {
            if (empIDs[i].equals(id)) {
                employeeCombo.setSelectedIndex(i + 1);
                break;
            }
        }
        dateText.setDate(selectedDate);
        startingTimeText.setText(workshiftsTable.getValueAt(workshiftsTable.getSelectedRow(), 2) + "");
        endingTimeText.setText(workshiftsTable.getValueAt(workshiftsTable.getSelectedRow(), 3) + "");
        String pr = (String) workshiftsTable.getValueAt(workshiftsTable.getSelectedRow(), 4);
        if (pr.equals("ab")) {
            absentRadioButton.setSelected(true);
        } else {
            presentRadioButton.setSelected(true);
        }
    }

    private void setEmployeesCombo() {
        try {
            empsList = employeeController.getAllEmployees();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!empsList.isEmpty()) {
            empIDs = new String[empsList.size()];
            employeesArray = new String[empsList.size() + 1];
            employeesArray[0] = "-Select an employee-";
            for (int i = 0; i < empsList.size(); i++) {
                Employee em = empsList.get(i);
                empIDs[i] = em.getId();
                employeesArray[i + 1] = em.getId() + "   " + em.getName();
            }
            employeeCombo.setModel(new DefaultComboBoxModel(employeesArray));
        }
    }

    private Workshift setWorkshift() {
        String id, e, employeeID = "", date = null, present = "";
        Verify ver = new Verify();
        int starting = 0, ending = 0;

        id = idLabel.getText();

        e = (String) employeeCombo.getSelectedItem();
        if (employeeCombo.getSelectedIndex() != 0) {
            empIDFlag = true;
            for (int i = 0; i < 9; i++) {
                employeeID += e.charAt(i) + "";
            }
        }

        if (dateText.getDate() != null) {
            date = dateFormat.format(dateText.getDate());
            if (ver.verifyDate(date)) {
                dateFlag = true;
            }
        }
        if (!startingTimeText.getText().equals("")) {
            starting = Integer.parseInt(startingTimeText.getText());
            if (starting < 2359 && starting > 0) {
                startFlag = true;
            }
        }
        if (!endingTimeText.getText().equals("")) {
            ending = Integer.parseInt(endingTimeText.getText());
            if (ending < 2359 && ending > 0) {
                endFlag = true;
            }
        }
        if (presentRadioButton.isSelected()) {
            present = "pr";
        } else if (absentRadioButton.isSelected()) {
            present = "ab";
        }

        return new Workshift(id, employeeID, date, starting, ending, present);
    }

    private void setHistoryTable() {
        historyTableModel.setRowCount(0);
        ArrayList<Object[]> mainArray = new ArrayList<>();
        String[] id = null;
        int[] hours = null;
        int s, e;

        try {
            wrksList = workshiftController.getAllWorkshifts();
        } catch (SQLException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Workshifts.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!workshiftList.isEmpty()) {
            id = new String[workshiftList.size()];
            hours = new int[workshiftList.size()];
        }

        for (int i = 0; i < workshiftList.size(); i++) {
            Workshift w = workshiftList.get(i);
            s = w.getStarting();
            e = w.getEnding();

            id[i] = w.getEmployeeID();
            hours[i] = e - s;
        }

        for (int i = 0; i < workshiftList.size(); i++) {
            String h = hours[i] + "";
            String hrs = h.charAt(0) + "." + h.charAt(1) + h.charAt(2);
            Object[] row = {id[i], "", hrs, ""};
            mainArray.add(row);
        }

        Object[] temp;
        double d1, d2;
        for (int i = mainArray.size(); i > 0; i--) {
            for (int j = 0; j < i - 1; j++) {
                d1 = Double.parseDouble((String) mainArray.get(j)[2]);
                d2 = Double.parseDouble((String) mainArray.get(j + 1)[2]);

                if (d1 > d2) {
                    temp = mainArray.get(j);
                    mainArray.set(j, mainArray.get(j + 1));
                    mainArray.set(j + 1, temp);
                }
            }
        }

        for (int i = 0; i < mainArray.size(); i++) {
            historyTableModel.addRow(mainArray.get(i));
        }
    }
}
